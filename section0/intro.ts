// 타입스크립트를 왜 배워야할까?
// 자바스크립트가 너무 잘나가서..?

// 자바스크립트는 유연한 문법, 버그로부터의 안정성이나 견고함은 일부 포기한 대신에 프로그래머가 아주 쉽고 빠르고 간결하게 코드를 작성하는데 중점으로 만들어진 것. 이런 유연함때문에 많은 사람들이 쉽고 편하게 쓸 수 있었음

// node.js의 등장
// node.js는 자바스크립트의 런타임, 즉 실행환경
// 쉽게말해 node.js는 자바스크립트 코드를 어디서든 실행할 수 있도록 만들어주는 자바스크립트 구동기

// node.js 탄생 이후에는 웹브라우저에서만 실행될 수 있었던 자바스크립트를 어디서든 실행할 수 있게 되었음. 즉, 어떤 프로그램이든 자바스크립트를 이용해서 만들 수 있다는 이야기.
// 그러자 지금까지 자바스크립트를 만족스럽게 사용하고 있던 프로그래머들이 자바스크립트를 이용해서 굉장히 다양한 프로그램들을 만들기 시작
// 웹서버부터 모바일 애플리케이션(페이스북, 인스타그램), 데스크탑 애플리케이션(카카오톡)
// 자바스크립트의 한계가 사라지고 전성기 시작

// 하지만 이렇게 복잡한 대규모 애플리케이션을 자바스크립트로 개발하다 보니, 문제 발생 -> 자바스크립트가 너무 엄격하지 않음.

// 자바스크립트는 애초에 간단한 프로그램을 개발하기 위해 만들어진 언어. 활용도가 높아지고 간단하지 않은 프로그램을 만들기 시작하면서 오히려 유연함이 버그발생 가능성을 높여 프로그램의 전체적인 안정성을 떨어뜨려버리는 단점이 되어버림.

// 자바스크립트의 문제점을 극복하기 위해서 자바스크립트의 기존 문법들과 매력은 그대로 유지한 채 자바스크립트를 더 안전하게 사용할 수 있도록 "타입 관련 기능들을 추가한" 타입스크립트 등장

// 타입스크립트는 더 복잡한 상황에서 대규모의 프로그램을 자바스크립트로 더 안정적이게 개발하기 위해 타입이라는 안정장치를 추가한 확장판 자바스크립트

/////////////////////////////////////////////////////////////

// 타입 시스템:
// 정적 타입 시스템(C, Java) - 코드 실행 이전에 모든 변수의 타입을 고정적으로 결정, 엄격하고 고정적인 시스템
// 동적 타입 시스템(Python, JavaScript) - 코드를 실행하고 나서 그때마다 유동적으로 변수의 타입을 결정, 자유롭고 유연한 시스템

// 동적 타입 시스템에서는
// let a = 123;
// a.toUpperCase();
// 와 같은 코드에서는 오류가 발생은 하지만 코드 자체는 실행이 됨. 이는 대규모 프로젝트에서 실행 도중 갑자기 오류가 발생할 수 있음.

// 정적 타입 시스템에서는 미리 타입을 결정하기 때문에 이러한 오류 자체가 발생하지 않음. 실행 전에 에디터 상에서 애초에 오류를 알려주고 실행되지 않음

// 하지만 정적 타입 시스템이라고 모든 게 다 좋은 것은 아님. 일일이 모든 변수의 타입을 지정해주어야 해서 코드의 양이 매우 증가함.

// 타입스크립트는 동적 타입 시스템 + 정적 타입 시스템처럼 실행된다.
// 정적 타입 시스템처럼 변수의 타입을 실행 전에 결정하고 타입 오류를 실행 전에 검사하지만 모든 변수에 일일이 타입을 명시할 필요는 없음

// let a:number = 123;
// a.toUpperCase();
// 와 같이 작성해도 오류를 알려주지만 위와같이

// let a = 123;
// a.toUpperCase();
// 로만 적어도 오류를 알려줌
// -> 점진적 타입 시스템(Gradual Type System): 타입이 미리 정의된 변수들에 대해서는 타입을 미리 결정하고, 타입이 정의되어있지 않은 변수들에 대해서는 타입스크립트가 알아서 자동으로 타입을 추론하는 스마트한 타입 시스템

////////////////////////////////////////////////////////////////////////////////

// 컴파일(Compile) : 사람이 이해하기 쉬운 프로그래밍 언어를 컴퓨터가 이해할 수 있는 기계어로 변환하는 과정(JavaScript -> 바이트 코드)
// 타입스크립트의 컴파일 과정: TypeScript 코드 -> AST(추상 문법 트리) -> 타입 검사 -> (검사 실패) -> 컴파일 종료
//                                                                               -> (검사 성공) -> 자바스크립트로 변환 -> AST -> 바이트 코드 -> 실행
